openapi: 3.0.0
info:
  version: '1.0.0'
  title: Backend RESTful API Interface
components:
  schemas:
    objectId:
      type: string
      description: "MongoDB ObjectID"
      example: "507f1f77bcf86cd799439011"
    UserPublicProfile:
      type: object
      required:
        - userId
        - userType
        - username
        - profileImage
      properties:
        userId:
          $ref: "#/components/schemas/objectId"
        userType:
          type: string
          enum: ["camUser", "classicUser"]
          example: "camUser"
        username:
          type: string
          example: "lucapirrone"
        profileImage:
          type: string
          example: "http://www.example.com"
    UsersPublicProfile:
      type: array
      items:
        $ref: "#/components/schemas/UserPublicProfile"
      example: [
      {
        "userId": "507f1f77bcf86cd799439011",
        "userType": "classic",
        "firstName": "Mario",
        "lastName": "Rossi",
        "profileImage": "http://www.example.com"
      },
      {
        "userId": "507f1f77bcf86cd799439011",
        "userType": "classic",
        "firstName": "Luca",
        "lastName": "Bianchi",
        "profileImage": "http://www.example.com"
      },
      {
        "userId": "507f1f77bcf86cd799439011",
        "userType": "camUser",
        "firstName": "Francesco",
        "lastName": "Brambilla",
        "profileImage": "http://www.example.com"
      }
      ]
    UserSettings:
      type: object
      required:
        - userId
        - enableNotification
        - appearInPeopleHere
        - profilePrivacy
      properties:
        userId:
          $ref: "#/components/schemas/objectId"
        enableNotification:
          type: boolean
          example: true
        appearInPeopleHere:
          type: boolean
          example: true
        profilePrivacy:
          type: string
          enum: ["public", "private"]
          example: "public"
    UserLiveConfiguration:
      type: object
      required:
        - streamServerUrl
        - streamKey
        - liveUrl
      properties:
        streamServerUrl:
          type: string
          example: "rtmps://e7f58a99478e.global-contribute.live-video.net:443/app/"
        streamKey:
          type: string
          example: "sk_us-east-1_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        liveUrl:
          type: string
          example: "https://e7f58a99478e.us-east-1.playback.live-video.net/api/video/v1/us-east-1.0123456789.channel.xxxxxxxxxxxx.m3u8"
    Place:
      type: object
      required:
        - placeId
        - name
        - description
        - address
        - coordinates
      properties:
        placeId:
          $ref: "#/components/schemas/objectId"
        name:
          type: string
          example: "Omnia Club"
        description:
          type: string
          example: "Very big discoteque"
        currentLiveUrl:
          type: string
          example: "https://e7f58a99478e.us-east-1.playback.live-video.net/api/video/v1/us-east-1.0123456789.channel.xxxxxxxxxxxx.m3u8"
        address:
          type: string
          example: "Via Roma 1, Milano MI"
        coordinates:
          type: object
          required:
            - longitude
            - latitude
          properties:
            latitude:
              type: string
              example: "42.7170741"
            longitude:
              type: string
              example: "12.6198393"
        userCam:
          $ref: "#/components/schemas/UserPublicProfile"
    Places:
      type: array
      items:
        $ref: "#/components/schemas/Place"
    Activity:
      type: object
      required:
        - name
        - date
        - description
      properties:
        activityId:
          $ref: "#/components/schemas/objectId"
        name:
          type: string
          example: "White Party"
        date:
          type: string
          example: "2020-05-21T13:00:35+00:00"
        description:
          type: string
          example: "Very big white party"
        thumbnail:
          type: string
    Activities:
      type: array
      items:
        $ref: "#/components/schemas/Activity"
      example: [
      {
        "activityId": "977f1f77bcf88md799439043",
        "name": "White Party",
        "date": "2020-05-21T13:00:35+00:00",
        "description": "Very big white party",
        "thumbnail": "https://s1.wklcdn.com/image_35/1059170/6706815/3739102Master.jpg"
      },
      {
        "activityId": "977f1f77bcf88md799439043",
        "name": "Black Party",
        "date": "2019-05-21T13:00:35+00:00",
        "description": "Very big black party",
        "thumbnail": "https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTYYuE9q0d0Zj7GeaZ-IM1RD5PSbRachwgt77QF8k2ek_76d3gq&usqp=CAU"
      }
      ]
    Live:
      type: object
      required:
        - createdAt
      properties:
        createdAt:
          type: string
          example: "2019-08-12T17:52:17-05:00"
        placeId:
          $ref: "#/components/schemas/objectId"
        liveId:
          $ref: "#/components/schemas/objectId"
    Lives:
      type: array
      items:
        $ref: "#/components/schemas/Live"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    userId:
      name: userId
      in: path
      required: true
      description: User id
      schema:
        type: string
    placeId:
      name: placeId
      in: path
      required: true
      description: Place id
      schema:
        type: string
    targetId:
      name: targetId
      in: path
      required: true
      description: User target id
      schema:
        type: string
    postId:
      name: postId
      in: path
      required: true
      description: Post id
      schema:
        type: string
    commentId:
      name: commentId
      in: path
      required: true
      description: Comment id
      schema:
        type: string
    activityId:
      name: activityId
      in: path
      required: true
      description: Activity id
      schema:
        type: string
    liveId:
      name: liveId
      in: path
      required: true
      description: Live id
      schema:
        type: string
    mediaId:
      name: mediaId
      in: path
      required: true
      description: Media id
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: number
    limit:
      name: limit
      in: query
      description: Output limit
      required: false
      schema:
        type: number
  securitySchemes:
    userPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - arn:aws:cognito-idp:${self:provider.region}:${self:provider.accountId}:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
  body-only:
    validateRequestBody: true
    validateRequestParameters: false
paths:
  /signUp:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      tags:
        - userGraph
      summary: Signup CamUser API
      x-amazon-apigateway-request-validator: "all"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-signUpUserAPI/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
      requestBody:
        description: CamUserInfo
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: CamUser signed up
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /bookMeeting:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Book meeting API
      x-amazon-apigateway-request-validator: "all"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-bookMeeting/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
      requestBody:
        description: Meeting info
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - date
                - name
                - email
                - phone
                - note
              properties:
                date:
                  type: string
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                note:
                  type: string
      responses:
        '200':
          description: Meeting requested succesful
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/profile:
    get:
      tags:
        - user
      summary: Get any user's public profile info
      description: Get any and public user's public profile info (userId)
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getUserPublicProfile/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User public profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicProfile"
  /users/{userId}/username:
    put:
      tags:
        - user
      summary: Change the username
      description: Change user name if user is logged in
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-editUsername/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: New username
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  example: "lucapirrone"
      responses:
        '200':
          description: Username changed
          content:
            application/json:
              schema:
                type: object
                required:
                  - username
                properties:
                  username:
                    type: string
                    example: "lucapirrone"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/upload-profile-image:
    post:
      tags:
        - user
      summary: Get presigned url to upload profile image
      description: Get presigned url to upload profile image
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-uploadProfileImage/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: File propetries
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fileName
                - fileType
              properties:
                fileName:
                  type: string
                fileType:
                  type: string
      responses:
        '200':
          description: Presigned URL
          content:
            application/json:
              schema:
                type: object
                required:
                  - presignedUrl
                properties:
                  presignedUrl:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/settings:
    get:
      tags:
        - user
      summary: Get user's settings
      description: Get user's settings if logged in
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getUserSettings/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Modify user's settings
      description: Modify user's settings if logged in
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-editUserSettings/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        description: New user settings
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: User settings changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/live-config:
    get:
      tags:
        - live
      summary: Get user's live configuration
      description: Get user's live configuration if logged in
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getUserCamLiveInfo/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLiveConfiguration"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /place:
    get:
      tags:
        - place
      summary: Get cam user logged place info
      description: Get any user's (userId) place info
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getCamUserPlace/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      responses:
        '200':
          description: User place
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Place"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}:
    get:
      tags:
        - place
      summary: Get place info
      description: Get any user's (userId) place info
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getPlace/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: User place
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Place"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - place
      summary: Modify place's info
      description: Modify user place's info if logged in
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-editPlace/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
      requestBody:
        description: New place info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Place"
      responses:
        '200':
          description: User place changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Place"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}/lives:
    get:
      tags:
        - place
        - live
      summary: Get lives info
      description: Get place's lives
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getLives/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: Lives info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lives"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}/lives/{liveId}:
    get:
      tags:
        - live
        - place
      summary: Get live info
      description: Get place's live info
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getLive/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - $ref: '#/components/parameters/liveId'
      responses:
        '200':
          description: Live info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Live"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - live
        - place
      summary: Edit live info
      description: Edit live info. User must be logged in
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-editLive/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - $ref: '#/components/parameters/liveId'
      requestBody:
        description: New live info
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Live"
      responses:
        '200':
          description: Live changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Live"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /places:
    get:
      tags:
        - place
      summary: Get places list inside position range
      description: Returns the list of positions within the position range. The position is indicated by coordinates (latitude and longitude) and the range is expressed in meters.
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getPlaces/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - name: latitude
          in: query
          description: User postition latitude
          required: true
          schema:
            type: string
        - name: longitude
          in: query
          description: User postition longitude
          required: true
          schema:
            type: string
        - name: range
          in: query
          description: Search range in meters
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Place result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Places"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}/activity:
    get:
      tags:
        - activity
        - place
      summary: Get place's activity list
      description: Returns the place's activities. Using a query parameter, you can request past, scheduled and ongoing activities.
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-getActivities/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - name: type
          in: query
          description: Activity type (past, ongoing and scheduled)
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Activities result
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Activity"
                  - $ref: "#/components/schemas/Activities"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - activity
        - place
      summary: Add activity
      description: Add activity. User must be logged in
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-addActivity/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
      requestBody:
        description: New activity
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        '200':
          description: Activity added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}/activity/{activityId}:
    put:
      tags:
        - activity
        - place
      summary: Edit activity
      description: Edit activity. User must be logged in.
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-editActivity/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - $ref: '#/components/parameters/activityId'
      requestBody:
        description: New activity
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        '200':
          description: Activity changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - activity
        - place
      summary: Delete activity
      description: Delete activity. User must be logged in.
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-deleteActivity/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - $ref: '#/components/parameters/activityId'
      responses:
        '200':
          description: Activity deleted succesfull
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /places/{placeId}/activity/{activityId}/upload-cover-image:
    post:
      tags:
        - activity
        - place
      summary: Get presigned url to upload cover image
      description: Get presigned url to upload cover image
      x-amazon-apigateway-request-validator: "all"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-uploadCoverImage/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - $ref: '#/components/parameters/placeId'
        - $ref: '#/components/parameters/activityId'
      requestBody:
        description: File propetries
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fileName
                - fileType
              properties:
                fileName:
                  type: string
                fileType:
                  type: string
      responses:
        '200':
          description: Presigned URL
          content:
            application/json:
              schema:
                type: object
                required:
                  - presignedUrl
                properties:
                  presignedUrl:
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /search:
    get:
      tags:
        - search
      summary: Search activities, places and users by query
      description: Return activities, palces and users that contains search query in 3 different arrays
      x-amazon-apigateway-request-validator: "params-only"
      security:
        - userPool: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri: arn:aws:apigateway:${self:provider.region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${self:provider.region}:${self:provider.accountId}:function:${self:service.name}-${self:provider.stage}-search/invocations
        credentials: arn:aws:iam::${self:provider.accountId}:role/apiInvokeRole-${self:provider.stage}
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Search result
          content:
            application/json:
              schema:
                type: object
                required:
                  - activities
                  - places
                  - users
                properties:
                  activities:
                    $ref: "#/components/schemas/Activities"
                  places:
                    $ref: "#/components/schemas/Places"
                  users:
                    $ref: "#/components/schemas/UsersPublicProfile"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lucapirrone/soMapCial/1.0.0
