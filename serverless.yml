# NOTE: update this with your service name
service:
  name: somap-api
plugins:
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  accountId: ${file(./environment/${self:provider.stage}.environment.json):ACCOUNT_ID}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    API_VERSION: ${self:provider.version}
    COGNITO_USER_POOL_ID: ${file(./environment/${self:provider.stage}.environment.json):COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${file(./environment/${self:provider.stage}.environment.json):COGNITO_CLIENT_ID}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - lambda:*
        - cognito-idp:*
        - ses:SendEmail
        - ses:SendTemplatedEmail
        - ses:SendRawEmail
        - ivs:*
      Resource: "*"
functions:
  signUpUserAPI:
    handler: build/services/userGraph/user/signUpUserAPI.main
  bookMeeting:
    handler: build/services/userGraph/user/bookMeeting.main
  signUp:
    handler: build/services/userGraph/user/signUp.main
  getUserPublicProfile:
    handler: build/services/userGraph/user/getUserPublicProfile.main
  editUsername:
    handler: build/services/userGraph/user/editUsername.main
  getUserSettings:
    handler: build/services/userGraph/user/getUserSettings.main
  editUserSettings:
    handler: build/services/userGraph/user/editUserSettings.main
  getUserCamLiveInfo:
    handler: build/services/userGraph/user/getUserCamLiveInfo.main

  addPlace:
    handler: build/services/userGraph/place/addPlace.main
  getCamUserPlace:
    handler: build/services/userGraph/place/getCamUserPlace.main
  getPlace:
    handler: build/services/userGraph/place/getPlace.main
  getPlaces:
    handler: build/services/userGraph/place/getPlaces.main
  editPlace:
    handler: build/services/userGraph/place/editPlace.main

  getLive:
    handler: build/services/live/getLive.main
  addLive:
    handler: build/services/live/addLive.main
  eventChangeLive:
    handler: build/services/live/eventChangeLive.main
    events:
      - eventBridge:
          pattern:
            source:
              - aws.ivs
            detail-type:
              - IVS Stream State Change
  editLive:
    handler: build/services/live/editLive.main
  deleteLive:
    handler: build/services/live/deleteLive.main
  getLives:
    handler: build/services/live/getLives.main

  getActivities:
    handler: build/services/content/activity/getActivities.main
  getActivity:
    handler: build/services/content/activity/getActivity.main
  addActivity:
    handler: build/services/content/activity/addActivity.main
  editActivity:
    handler: build/services/content/activity/editActivity.main
  deleteActivity:
    handler: build/services/content/activity/deleteActivity.main

  search:
    handler: build/services/search/mixedSearch.main

resources:
  # API Gateway
  - ${file(resources/api-gateway/api-gateway.yml)}
